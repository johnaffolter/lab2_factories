[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "mlops-email-classifier"
version = "2.0.0"
description = "MLOps Email Classification System with Factory Pattern, Neo4j Knowledge Graph, and Airflow Orchestration"
authors = [{name = "MLOps Team"}]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.8,<3.13"

# Core dependencies - minimal set for all environments
dependencies = [
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
# FastAPI web server dependencies
web = [
    "fastapi>=0.104.1",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "python-multipart>=0.0.6",
]

# Neo4j graph database
neo4j = [
    "neo4j>=5.14.0,<6.0.0",
]

# AWS S3 and cloud services
aws = [
    "boto3>=1.29.0",
    "botocore>=1.32.0",
]

# OpenAI and LLM integrations
llm = [
    "openai>=1.3.0,<2.0.0",
]

# Apache Airflow for workflow orchestration (Docker only)
airflow = [
    "apache-airflow>=2.7.0,<2.11.0",
]

# ML and data science libraries
ml = [
    "numpy>=1.24.0,<2.0.0",
    "pandas>=2.0.0",
    "scikit-learn>=1.3.0",
]

# Development and testing
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "httpx>=0.25.0",
    "black>=23.11.0",
    "ruff>=0.1.6",
    "mypy>=1.7.0",
]

# Complete local development (all features)
local = [
    "mlops-email-classifier[web,neo4j,aws,llm,ml,dev]",
]

# Docker/Airflow environment (no dev tools, no web server)
docker = [
    "mlops-email-classifier[neo4j,aws]",
]

# FastAPI web server environment (web + databases)
api = [
    "mlops-email-classifier[web,neo4j,aws,llm,ml]",
]

[tool.setuptools.packages.find]
where = ["."]
include = ["app*", "dags*"]

[tool.uv]
# UV-specific configuration
dev-dependencies = [
    "pytest>=7.4.0",
    "ruff>=0.1.6",
]

[tool.uv.sources]
# Can specify custom package sources here if needed

[tool.ruff]
line-length = 100
target-version = "py38"
select = ["E", "F", "I", "N", "W"]
ignore = ["E501"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]